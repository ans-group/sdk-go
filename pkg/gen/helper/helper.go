package helper

import (
	"bytes"
	"flag"
	"fmt"
	"html/template"
	"io/ioutil"
	"os"
	"strings"
)

type templateData struct {
	TypeName string
}

func TypeTemplate(generatorPackage string, templateString string) {
	var flagTypeName string
	var flagDestination string
	var flagPackage string
	flag.StringVar(&flagTypeName, "typename", "", "Name of type, comma separated")
	flag.StringVar(&flagDestination, "destination", "", "Path to destination file")
	flag.StringVar(&flagPackage, "package", "", "Package name")
	flag.Parse()

	var result bytes.Buffer

	result.WriteString(fmt.Sprintf("// Code generated by %s. DO NOT EDIT.\npackage %s\n\nimport \"github.com/ukfast/sdk-go/pkg/connection\"\n", generatorPackage, flagPackage))

	for _, typeName := range strings.Split(flagTypeName, ",") {
		d := templateData{
			TypeName: strings.TrimSpace(typeName),
		}
		rendered, err := doTemplate(d, templateString)
		fatalOnError(err)

		_, err = result.Write(rendered)
		fatalOnError(err)
	}

	err := ioutil.WriteFile(flagDestination, result.Bytes(), 0644)
	fatalOnError(err)
}

func doTemplate(data interface{}, templateStr string) ([]byte, error) {
	tmpl, err := template.New("tmpl").Parse(templateStr)
	if err != nil {
		return []byte{}, err
	}

	var result bytes.Buffer

	err = tmpl.Execute(&result, data)
	if err != nil {
		return []byte{}, err
	}

	return result.Bytes(), nil
}

func fatalOnError(err error) {
	if err != nil {
		fmt.Print(err.Error())
		os.Exit(1)
	}
}

func GenerateImports(imports []string) string {
	if len(imports) == 0 {
		return ""
	}

	if len(imports) == 1 {
		return fmt.Sprintf("import \"%s\"", imports[0])
	}

	importItems := []string{}
	for _, item := range imports {
		importItems = append(importItems, fmt.Sprintf("\t\"%s\"", item))
	}

	return fmt.Sprintf("import (\n%s\n)", strings.Join(importItems, "\n"))
}
